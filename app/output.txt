<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>App</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));
/* You can add global styles to this file, and also import other style files */
/* Reset some default styles for consistency */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: Arial, sans-serif;
}

body {
  background-color: #f8f9fa;
  color: #333;
  font-size: 16px;
  line-height: 1.5;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

/* Container styling for centering content */
.container {
  max-width: 600px;
  background-color: white;
  padding: 30px;
  margin: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  text-align: center;
}

/* Form and Input styling */
form {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

label {
  font-weight: 600;
  color: #555;
  text-align: left;
}

input, select, button {
  padding: 12px;
  margin-top: 5px;
  width: 100%;
  border-radius: 5px;
  border: 1px solid #ddd;
  font-size: 16px;
  transition: all 0.3s ease;
}

input:focus, select:focus {
  outline: none;
  border-color: #007bff;
}

button {
  background-color: #007bff;
  color: white;
  border: none;
  font-weight: bold;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

button:active {
  background-color: #004494;
}

/* Result text styling */
p {
  font-size: 18px;
  color: #333;
  margin-top: 20px;
}

/* Add some nice heading styling */
h1 {
  font-size: 24px;
  color: #333;
  margin-bottom: 20px;
  font-weight: bold;
}
.container {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
  text-align: center;
}

div {
  margin: 10px 0;
}

label {
  display: block;
  font-weight: bold;
}

input, select, button {
  padding: 10px;
  margin-top: 5px;
  width: 100%;
}

button {
  background-color: #007bff;
  color: white;
  border: none;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

p {
  font-size: 18px;
  margin-top: 20px;
}
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';


export const appConfig: ApplicationConfig = {
  providers: [provideZoneChangeDetection({ eventCoalescing: true })]
};
import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { getSupportedCurrencies, fetchAvailableDates, getExchangeRate } from 'lib/src';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [FormsModule, CommonModule],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  title = 'Currency Converter';
  currencies: string[] = []; // Populate from library function
  fromCurrency: string = 'USD';
  toCurrency: string = 'EUR';
  amount: number = 1;
  selectedDate: string = '';
  availableDates: string[] = [];
  conversionResult: number | null = null;

  constructor() {}

  async ngOnInit(): Promise<void> {
    // Populate currencies using library function
    const pairs = getSupportedCurrencies();
    const uniqueCurrencies = new Set(pairs.map(pair => pair.split('/')[0]));
    this.currencies = Array.from(uniqueCurrencies);

    // Fetch available dates from the library
    try {
      this.availableDates = await fetchAvailableDates();
    } catch (error) {
      console.error("Error fetching available dates:", error);
    }
  }

  async convertCurrency(): Promise<void> {
    if (!this.selectedDate || !this.fromCurrency || !this.toCurrency || !this.amount) {
      console.warn("Please fill all the fields for conversion.");
      return;
    }

    try {
      // Fetch conversion rate for the selected date and currencies from the library
      const result = await getExchangeRate(this.selectedDate, this.fromCurrency, this.toCurrency, this.amount);
      this.conversionResult = result.convertedAmount;
    } catch (error) {
      console.error("Error converting currency:", error);
      this.conversionResult = null;
    }
  }
}

<div class="container">
  <h1>{{ title }}</h1>

  <form>
    <label for="fromCurrency">From Currency:</label>
    <select id="fromCurrency" [(ngModel)]="fromCurrency" name="fromCurrency">
      <option *ngFor="let currency of currencies" [value]="currency">{{ currency }}</option>
    </select>

    <label for="toCurrency">To Currency:</label>
    <select id="toCurrency" [(ngModel)]="toCurrency" name="toCurrency">
      <option *ngFor="let currency of currencies" [value]="currency">{{ currency }}</option>
    </select>

    <label for="amount">Amount:</label>
    <input type="number" id="amount" [(ngModel)]="amount" name="amount" />

    <label for="date">Date:</label>
    <select id="date" [(ngModel)]="selectedDate" name="date">
      <option *ngFor="let date of availableDates" [value]="date">{{ date }}</option>
    </select>

    <button type="button" (click)="convertCurrency()">Convert</button>
  </form>

  <div *ngIf="conversionResult !== null">
    <p>Conversion Result: {{ amount }} {{ fromCurrency }} = {{ conversionResult | number:'1.2-2' }} {{ toCurrency }}</p>
  </div>
</div>

import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });
});
